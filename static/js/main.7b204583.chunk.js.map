{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Up","Down","Board","_React$Component","Object","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","i","_this","squares","renderSquare","renderRow","React","Component","Game","_React$Component2","_this2","call","state","history","Array","fill","stepNumber","pos_his","pos","xIsNext","incOrDec","slice","length","xy","calculateWinner","b","parseInt","calculatePos","setState","concat","step","e","target","style","fontWeight","fontStyle","status","_this3","current","winner","tie","lines","_lines$i3","C_web_project2_react_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","c","calculateTie","line","_lines$i2","calculateWinLine","moves","map","move","desc","jumpTo","position","document","querySelectorAll","classList","add","handleClick","handleClick3","handleClick2","reverse","_lines$i","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.7b204583.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Up(props) {                 // 新增向上排列 component\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      ⬆\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Down(props) {               // 新增向下排列 component\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      ⬇\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderRow(i) {\r\n    return (\r\n      <div className=\"board-row\">\r\n        {this.renderSquare(0 + 3*i)}\r\n        {this.renderSquare(1 + 3*i)}\r\n        {this.renderSquare(2 + 3*i)}\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n          {this.renderRow(0)}\r\n          {this.renderRow(1)}\r\n          {this.renderRow(2)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      pos_his: [                            // 1.在歷史動作列表中，用（欄，列）的格式來顯示每個動作的位置。\r\n        {\r\n          pos: Array(2).fill(null),         // 初始化（欄，列）值\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      incOrDec: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const pos_his = this.state.pos_his.slice(0, this.state.stepNumber + 1);  // 取得（欄，列）值歷史紀錄\r\n    const pos = pos_his[pos_his.length - 1];                                 // 取得最新（欄，列）值紀錄\r\n    let xy = pos.pos.slice();                                                // 取得最新（欄，列）值\r\n\r\n    if (calculateWinner(squares) || squares[i]) {   // 如果已達成連線或點擊位置已有值, 則不做任何動作, 返回。\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    xy = calculatePos(i);                // 轉換（欄，列）值來顯示每個動作的位置。\r\n\r\n    //xy[0] = i % 3;\r\n    //xy[1] = parseInt(i / 3);    \r\n\r\n\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      pos_his: pos_his.concat([         // 將這一步新增的（欄，列）的位置加入到（欄，列）值歷史紀錄中。\r\n         {\r\n           pos: xy\r\n         }\r\n      ]),\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  handleClick2() {                 // 新增向下排列 handler\r\n      this.setState({\r\n        incOrDec: true\r\n      });\r\n  }\r\n\r\n  handleClick3() {                 // 新增向上排列 handler\r\n      this.setState({\r\n        incOrDec: false\r\n      });\r\n  }\r\n\r\n  jumpTo(step,e) {                               // 2.在動作列表中，將目前被選取的項目加粗。\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n    e.target.style.fontWeight = 'bold';           // 2.在動作列表中，將目前被選取的項目加粗。\r\n    e.target.style.fontStyle = 'oblique';         // 2.在動作列表中，將目前被選取的項目加粗。\r\n    //e.target.style.background = 'yellow';       // 2.在動作列表中，將目前被選取的項目加粗。\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);  // 計算誰是勝利者 ?\r\n    const tie = calculateTie(current.squares);        // 計算是否平手 ?\r\n    const line = calculateWinLine(current.squares);  // 計算達成連線之位置 \r\n    const pos_his = this.state.pos_his;\r\n    const pos = pos_his[this.state.stepNumber];\r\n    const xy = pos.pos;                           // 取得這一步的（欄，列）值。\r\n    const incOrDec = this.state.incOrDec;         // 取得歷史步驟向上或向下排列狀態\r\n\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={(e) => this.jumpTo(move,e)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    //const moves_rev = moves.reverse();\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    let position = '準備開始';                                    // 用 position 變數儲存位置資訊。\r\n\r\n    if (xy[0] !== null || xy[1] !== null) {                       // 計算 欄，列 資訊加入 position 變數\r\n      position = '第' + (xy[0]+1) + '欄, 第' + (xy[1]+1) + ' 列';\r\n    } \r\n\r\n    let status;\r\n    if (winner) {                     // 如果 winner 有值, 填入 status\r\n      status = \"Winner: \" + winner;\r\n      var squares = document.querySelectorAll('.square');\r\n      for (let i = 0; i < squares.length; i++) {\r\n          if (i === line[0] ||i === line[1] || i === line[2]) {\r\n            squares[i].classList.add('win');           // 已達成連線之方格新增 win class 屬性\r\n          }\r\n      }\r\n      //console.log(squares);\r\n       \r\n    } else if (tie) {\r\n      status = \"Tie: 平手\";           // 如果 tie 有值, 填入 status\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");  // 如果 winner, tie 皆沒有值\r\n    }                                                               // 計算下一個 player\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{position}</div>          \r\n          <div>{status}</div>\r\n          <br/>\r\n          <div>          \r\n               <Up onClick={() => this.handleClick3()}/>\r\n               <Down onClick={() => this.handleClick2()}/>\r\n          </div>\r\n          <br/>\r\n          <br/>\r\n          <ul>{incOrDec?moves:moves.reverse()}</ul>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<Game />);\r\n\r\nfunction calculateWinner(squares) {       // 計算是否達成連線的函數\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction calculateWinLine(squares) {       // 計算達成連線之方格的位置的函數\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return lines[i];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction calculatePos(i) {       // 計算 欄，列 位置的函數\r\n  \r\n      var b = parseInt(i / 3);\r\n      var a = i % 3;\r\n\r\n      let pos = [a, b];\r\n      return pos;\r\n \r\n}\r\n\r\nfunction calculateTie(squares) {       // 計算是否平手的函數\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] === null || squares[b] === null || squares[c] === null) {\r\n      return null;\r\n    }\r\n  }\r\n  return 'tie';\r\n}\r\n\r\n"],"sourceRoot":""}